%% Main: Measurement data
% This script contains the measured data from the discharge and charge experiment conducted on a 50Ah LiFePO4 battery.

% Organization:     OeWF (Austrian Space Forum)
% Author:           Omar Filip El Sendiouny
% Project:          Serenity BU-COMMs
% Date:             24.03.2021
% Version:          1.0

clear all;
close all;
clc;

en_figures = 0; % enable figures
figure_counter = 1;
fnt_sz = 17.5; % font size for latex figures
t_shift = 25; % shift for oscilloscope time data set in (s)
R_shunt = 1.2 * 10^(-3); % shunt resistor value in (Ohm)

%% Open-circuit voltages
% discharging time = 9min
% charging time = 12.5min
% resting period = 20min (during discharging and charging experiment)

SOC = [1.00 0.95 0.90 0.85 0.80 0.75 0.70 0.65 0.60 0.55 0.50 0.45 0.40 0.35 0.30 0.25 0.20 0.15 0.10 0.05 0.00]; % state of charge in (1) of the battery
U_0_D = [13.877 13.315 13.319 13.322 13.320 13.306 13.248 13.196 13.181 13.117 13.174 13.172 13.169 13.111 13.087 13.012 12.931 12.837 12.814 12.350 11.371]; % open-circuit voltage when discharging the battery in (V) 
vartheta_A_D = [23.1 23.5 23.5 23.8 23.7 23.9 23.9 23.9 24.1 23.9 24.3 23.9 24.0 24.3 24.2 24.2 24.2 24.2 24.5 24.5 24.2]; % ambient temperature in (degrees C) for U_0_D(SOC) measurement
U_0_C = [14.107 13.387 13.393 13.401 13.415 13.388 13.387 13.275 13.272 13.253 13.250 13.248 13.250 13.244 13.225 13.179 13.089 12.958 12.923 12.502 11.420]; % open-circuit voltage when charging the battery in (V)
vartheta_A_C = [25.5 25.3 25.3 25.5 25.6 24.7 25.0 25.0 25.3 25.5 25.8 25.3 25.3 25.1 25.3 25.1 25.1 24.9 25.2 25.0 25.0]; % ambient temperature in (degrees C) for U_0_C(SOC) measurement


disp_str = ['Avg. temp discharging exp.: ', num2str(mean(vartheta_A_D)),'degrees C.']; % print avg. temps. during the experiments to the console
disp(disp_str)
disp_str = ['Avg. temp charging exp.: ', num2str(mean(vartheta_A_C)),'degrees C.'];
disp(disp_str)


U_0 = zeros(1, length(SOC)); % init. open-circuit voltage in (V)
for i = 1:length(SOC)
    U_0(i) = (U_0_D(i) + U_0_C(i))/2; % calculating open-circuit voltage
end

if(en_figures)
    figure(figure_counter); % plot open-circuit voltages
    hold on;
    grid on;
    xlabel('$\mathrm{SOC}$ in $\left(\mathrm{1}\right)$', 'Interpreter', 'latex', 'FontSize', fnt_sz);
    ylabel('Open-circuit voltages in $\left(\mathrm{V}\right)$', 'Interpreter', 'latex', 'FontSize', fnt_sz);
    plot_1 = plot(SOC, U_0_C, '-*', 'DisplayName', '$U_\mathrm{0,C}(\mathrm{SOC}_n)$', 'Linewidth', .7, 'Color', '#009933');
    plot_2 = plot(SOC, U_0, 'DisplayName', '$U_\mathrm{0}(\mathrm{SOC}_n)$', 'Linewidth', 1.4, 'Color', '#eb7a34');
    plot_3 = plot(SOC, U_0_D, '--', 'DisplayName', '$U_\mathrm{0,D}(\mathrm{SOC}_n)$', 'Linewidth', .7, 'Color', '#0066FF');
    legend([plot_1, plot_2, plot_3], 'Location', 'SouthEast', 'Interpreter', 'latex', 'FontSize', fnt_sz);
    ax = gca;
    set(ax,'TickLabelInterpreter', 'latex', 'FontSize', fnt_sz);
    ax.YAxis.TickLabelFormat = '%.1f';
    
    plot_pos_x0 = 10;
    plot_pos_y0 = 10;
    plot_width = 600;
    plot_height = 400;
    set(gcf,'position',[plot_pos_x0, plot_pos_y0, plot_width, plot_height]);
    
    export_title = 'latex_export/image_open_circuit_voltages_matlab.eps';
    exportgraphics(gcf, export_title);
    
    figure_counter = figure_counter + 1;
end

%% Calculating electrolyte resistance R_e,D when discharging:

delta_U_D = zeros(1, length(SOC)); % init. delta_U_D in (V)
I_D = zeros(1, length(SOC)); % init. I_D in (A)
R_eD = zeros(1, length(SOC)); % ini.t R_eD in (Omeaga)

for j = 1:length(SOC)

% ----------------------------------------------------------------- %
% Reading .cvs data set generated by the oscilloscope for           %
% SOC = 1.00 to 0.00:                                               %
% ----------------------------------------------------------------- %
    
    imported_data = ['dis/dis_soc_', num2str(SOC(j) * 100),'.csv']; % importing .cvs data set

    dis_data = table2array(readtable(imported_data)); % convert table (.cvs data set) into array (vector)
    dis_data(1,:) = []; % deleting the first row (oscilloscop axis info)
    dis_data(1,:) = []; % deleting the "second", now first, row (oscilloscop axis info)

    osc_time = dis_data(:,1) + t_shift; % oscilloscope time data shifted with t_shift so that it starts with 0s
    osc_ch1 = dis_data(:,2); % oscilloscope channel 1 data set
    osc_ch2 = dis_data(:,3) / R_shunt; % oscilloscope channel 2 data set divided by R_shunt to obtain discharge current 
    
% ----------------------------------------------------------------- %
% Obtaining delta_U_D and I_D:                                      %
% ----------------------------------------------------------------- %
    
    [changes_ch1, mean_ch1] = ischange(osc_ch1, 'MaxNumChanges', 2, 'SamplePoints', osc_time); % [find abrupt changes in the data set, mean value before and after the abrupt change occured] 
    [changes_ch2, mean_ch2] = ischange(osc_ch2, 'MaxNumChanges', 2, 'SamplePoints', osc_time);

    emp_sigma = 3; % empirical value used to adjust the abrupt change in the data set 
    for i = 1:length(changes_ch1) % find first abrupt change in data set
        if(changes_ch1(i)) % if abrupt change is found
            ch1_y1 = mean_ch1(i - 1); % assign mean value of the data before the abrupt change
            ch1_y2 = changes_ch1(i) * osc_ch1(i + emp_sigma); % voltage drop is located emp_sigma data points later than abrupt change detected by ischange()
            break
        end
    end

    delta_U_D(j) = abs(ch1_y1 - ch1_y2); % calculate voltage drop
    cursor_ch1_y1 = zeros(1, length(osc_time)); % init cursor Ch1 Y1
    cursor_ch1_y2 = zeros(1, length(osc_time)); % init cursor Ch1 Y2
    for i = 1:length(osc_time) % generate cursors for Ch1
        cursor_ch1_y1(i) = ch1_y2;
        cursor_ch1_y2(i) = ch1_y1;
    end  

    for i = 1:length(changes_ch2)
        if(changes_ch2(i)) 
            ch2_y1 = mean_ch2(i - 1); % assign mean value of the data set before the abrupt change
            ch2_y2 = mean_ch2(i); % assign mean value of the data set after the abrupt change
            break
        end
    end

    I_D(j) = abs(ch2_y1 - ch2_y2); % calculate the discharge current
    cursor_ch2_y1 = zeros(1, length(osc_time)); % init cursor Ch2 Y1
    cursor_ch2_y2 = zeros(1, length(osc_time)); % init cursor Ch2 Y2
    for i = 1:length(osc_time) % generate cursors for Ch2
        cursor_ch2_y1(i) = ch2_y1;
        cursor_ch2_y2(i) = ch2_y2;
    end

    R_eD(j) = abs(delta_U_D(j)) / I_D(j); % calculate the electrolyte resistance when the battery is discharging
    
    if(en_figures) 
        figure(figure_counter); % plot the Ch1 and Ch2 datastes as well as the calculated cursors obtained from the discharge experiment
        xlabel('Time $t$ in $\left(\mathrm{s}\right)$', 'Interpreter', 'latex', 'FontSize', fnt_sz);
        hold on;
        grid on;
        
        yyaxis right;
        plot_1 = plot(osc_time, osc_ch1, 'DisplayName', '$U_\mathrm{B}(t)$', 'Linewidth', 1.4, 'Color', '#0066FF');
        cursor_plot_ch1_y1 = plot(osc_time, cursor_ch1_y1, '--', 'Linewidth', .7, 'Color', '#0000FF', 'DisplayName', 'Ch1 cursor Y1');
        cursor_plot_ch1_y2 = plot(osc_time, cursor_ch1_y2, '-.', 'Linewidth', .7, 'Color', '#0000FF', 'DisplayName', 'Ch1 cursor Y2');
        ylabel('Oscilloscope Ch1 in $\left(\mathrm{V}\right)$', 'Interpreter', 'latex', 'FontSize', fnt_sz);
        set(gca,'yticklabel',num2str(get(gca,'ytick')','%.2f'))
        
        yyaxis left;
        plot_2 = plot(osc_time, osc_ch2, 'DisplayName', '$I_\mathrm{D}(t)$', 'Linewidth', 1.4, 'Color', '#009933');
        cursor_plot_ch2_y1 = plot(osc_time, cursor_ch2_y1, '--', 'Linewidth', .7, 'Color', '#006600', 'DisplayName', 'Ch2 cursor Y1');
        cursor_plot_ch2_y2 = plot(osc_time, cursor_ch2_y2, '-.', 'Linewidth', .7, 'Color', '#006600', 'DisplayName', 'Ch2 cursor Y2');
        ylabel('Oscilloscope Ch2 in $\left(\mathrm{A}\right)$', 'Interpreter', 'latex', 'FontSize', fnt_sz);
        
        legend([plot_1, plot_2, cursor_plot_ch1_y1, cursor_plot_ch1_y2, cursor_plot_ch2_y1, cursor_plot_ch2_y2], 'Location', 'SouthEast', 'Interpreter', 'latex', 'FontSize', fnt_sz);
        ax = gca;
        ax.YAxis(1).Color = '#009933';
        ax.YAxis(2).Color = '#0066FF';
        set(ax,'TickLabelInterpreter', 'latex', 'FontSize', fnt_sz);
        
        plot_pos_x0 = 10;
        plot_pos_y0 = 10;
        plot_width = 800;
        plot_height = 400;
        set(gcf,'position',[plot_pos_x0, plot_pos_y0, plot_width, plot_height]);
        
        export_title = ['latex_export/image_dis_', num2str(SOC(j) * 100),'.eps'];
        exportgraphics(gcf, export_title);
        
        figure_counter = figure_counter + 1;
    end
    
end

%% Calculating electrolyte resistance R_e,C when charging:

delta_U_C = zeros(1, length(SOC)); % init. delta_U_C in (V)
I_C = zeros(1, length(SOC)); % init. I_C in (A)
R_eC = zeros(1, length(SOC)); % init. R_eC in (Omega)

% ----------------------------------------------------------------- %
% Reading .cvs data set generated by the oscilloscope for           %
% SOC = 1.00:                                                       %
% ----------------------------------------------------------------- %

imported_data = ['chg/chg_soc_', num2str(SOC(1) * 100),'.csv'];

dis_data = table2array(readtable(imported_data));                         
dis_data(1,:) = [];                                                       
dis_data(1,:) = [];                                                       

osc_time = dis_data(:,1) + t_shift;                                     
osc_ch1 = dis_data(:,2);                                                
osc_ch2 = dis_data(:,3) / R_shunt * (-1); % multipied with -1 due to Kirchhoff's second law                             

% ----------------------------------------------------------------- %
% Obtaining delta_U_C and I_C for SOC = 1.00:                       %
% ----------------------------------------------------------------- %

[changes_ch1, mean_ch1] = ischange(osc_ch1, 'MaxNumChanges', 1, 'SamplePoints', osc_time); 
[changes_ch2, mean_ch2] = ischange(osc_ch2, 'MaxNumChanges', 2, 'SamplePoints', osc_time); 

emp_sigma_U_B_top = 3; % empirical value used to adjust the abrupt change in the data set
emp_sigma_U_B_bottom = 20; % empirical value used to adjust the abrupt change in the data set
for i = 1:length(changes_ch1)                                             
    if(changes_ch1(i))                                                    
        ch1_y1 = changes_ch1(i) * osc_ch1(i + emp_sigma_U_B_top);       
        ch1_y2 = changes_ch1(i) * osc_ch1(i - emp_sigma_U_B_bottom);      
        break
    end
end

delta_U_C(1) = abs(ch1_y1 - ch1_y2); % caluculate voltage rise
cursor_ch1_y1 = zeros(1, length(osc_time)); % init. cursor Ch1 Y1 in (V)
cursor_ch1_y2 = zeros(1, length(osc_time)); % init. cursor Ch1 Y2 in (V)
for i = 1:length(osc_time)
    cursor_ch1_y1(i) = ch1_y2;
    cursor_ch1_y2(i) = ch1_y1;
end  

emp_sigma_I_C_top = 8; % empirical value used to adjust the abrupt change in the data set
emp_sigma_I_C_bottom = 1; % empirical value used to adjust the abrupt change in the data set
for i = 1:length(changes_ch2)
    if(changes_ch2(i))
        ch2_y1 = changes_ch2(i) * osc_ch2(i + emp_sigma_I_C_top);
        ch2_y2 = changes_ch2(i) * osc_ch2(i - emp_sigma_I_C_bottom);
        break
    end
end

I_C(1) = abs(ch2_y1 - ch2_y2); % caluculate charge current
cursor_ch2_y1 = zeros(1, length(osc_time)); % init. cursor Ch2 Y1 in (A)
cursor_ch2_y2 = zeros(1, length(osc_time)); % init. cursor Ch2 Y2 in (A)
for i = 1:length(osc_time) 
    cursor_ch2_y1(i) = ch2_y2;
    cursor_ch2_y2(i) = ch2_y1;
end

R_eC(1) = abs(delta_U_C(1)) / I_C(1); % calculate the electrolyte resistance when the battery is charging

if(en_figures)
    figure(figure_counter); % plot the Ch1 and Ch2 datastes as well as the calculated cursors obtained from the charge experiment
    xlabel('Time $t$ in $\left(\mathrm{s}\right)$', 'Interpreter', 'latex', 'FontSize', fnt_sz);
    hold on;
    grid on;

    yyaxis right;
    plot_1 = plot(osc_time, osc_ch1, 'DisplayName', '$U_\mathrm{B}(t)$', 'Linewidth', 1.4, 'Color', '#0066FF');
    cursor_plot_ch1_y1 = plot(osc_time, cursor_ch1_y1, '--', 'Linewidth', .7, 'Color', '#0000FF', 'DisplayName', 'Ch1 cursor Y1');
    cursor_plot_ch1_y2 = plot(osc_time, cursor_ch1_y2, '-.', 'Linewidth', .7, 'Color', '#0000FF', 'DisplayName', 'Ch1 cursor Y2');
    ylabel('Oscilloscope Ch1 in $\left(\mathrm{V}\right)$', 'Interpreter', 'latex', 'FontSize', fnt_sz);
    set(gca,'yticklabel',num2str(get(gca,'ytick')','%.2f'))

    yyaxis left;
    plot_2 = plot(osc_time, osc_ch2, 'DisplayName', '$I_\mathrm{C}(t)$', 'Linewidth', 1.4, 'Color', '#009933');
    cursor_plot_ch2_y1 = plot(osc_time, cursor_ch2_y1, '--', 'Linewidth', .7, 'Color', '#006600', 'DisplayName', 'Ch2 cursor Y1');
    cursor_plot_ch2_y2 = plot(osc_time, cursor_ch2_y2, '-.', 'Linewidth', .7, 'Color', '#006600', 'DisplayName', 'Ch2 cursor Y2');
    ylabel('Oscilloscope Ch2 in $\left(\mathrm{A}\right)$', 'Interpreter', 'latex', 'FontSize', fnt_sz);

    legend([plot_1, plot_2, cursor_plot_ch1_y1, cursor_plot_ch1_y2, cursor_plot_ch2_y1, cursor_plot_ch2_y2], 'Location', 'SouthEast', 'Interpreter', 'latex', 'FontSize', fnt_sz);
    ax = gca;
    ax.YAxis(1).Color = '#009933';
    ax.YAxis(2).Color = '#0066FF';
    set(ax,'TickLabelInterpreter', 'latex', 'FontSize', fnt_sz);

    plot_pos_x0 = 10;
    plot_pos_y0 = 10;
    plot_width = 800;
    plot_height = 400;
    set(gcf,'position',[plot_pos_x0, plot_pos_y0, plot_width, plot_height]);

    export_title = ['latex_export/image_chg_', num2str(SOC(1) * 100),'.eps'];
    exportgraphics(gcf, export_title);

    figure_counter = figure_counter + 1;
end

for j = 2:length(SOC)
    
% ----------------------------------------------------------------- %
% Reading .cvs data set generated by the oscilloscope for           %
% SOC = 0.95 to 0.00                                                %
% ----------------------------------------------------------------- %
    
    imported_data = ['chg/chg_soc_', num2str(SOC(j) * 100),'.csv'];

    dis_data = table2array(readtable(imported_data));                     
    dis_data(1,:) = [];                                                   
    dis_data(1,:) = [];                                                   

    osc_time = dis_data(:,1) + t_shift;                                  
    osc_ch1 = dis_data(:,2);                                            
    osc_ch2 = dis_data(:,3) / R_shunt * (-1);                          

% ----------------------------------------------------------------- %
% Obtaining delta_U_C and I_C for SOC = 0.95 to 0.00:               %
% ----------------------------------------------------------------- %

    [changes_ch1, mean_ch1] = ischange(osc_ch1, 'MaxNumChanges', 2, 'SamplePoints', osc_time); 
    [changes_ch2, mean_ch2] = ischange(osc_ch2, 'MaxNumChanges', 2, 'SamplePoints', osc_time); 

    emp_sigma_U_B_top = 3; % empirical value used to adjust the abrupt change in the data set
    emp_sigma_U_B_bottom = 1; % empirical value used to adjust the abrupt change in the data set   
    count = 0; % counter
    for i = 1:length(changes_ch1) 
        if(changes_ch1(i))
            count = count + 1; % if found, increse counter
        end
       
        if(count == 2) % below i is the index for the second abrupt change in the data set                                                   
            ch1_y1 = changes_ch1(i) * osc_ch1(i - emp_sigma_U_B_top);     
            ch1_y2 = changes_ch1(i) * osc_ch1(i + emp_sigma_U_B_bottom);
            break
        end
    end

    delta_U_C(j) = abs(ch1_y1 - ch1_y2); % calculating voltage drop
    cursor_ch1_y1 = zeros(1, length(osc_time)); % init. cursor Ch1 Y1 in (V) 
    cursor_ch1_y2 = zeros(1, length(osc_time)); % init. cursor Ch1 Y2 in (V)
    for i = 1:length(osc_time)
        cursor_ch1_y1(i) = ch1_y2;
        cursor_ch1_y2(i) = ch1_y1;
    end
    
    first_index = 0; % used for mean value calculation of I_C (top)
    second_index = 0;
    emp_index_adap = 20; % empirical value to adapt mean value
    count = 0;
    for i = 1:length(changes_ch2)
        if(changes_ch2(i))
            count = count + 1;
            if(count == 1)
                first_index = i;
            end
            if(count == 2)
                second_index = i;
                break
            end
        end
    end
    
    osc_ch2_top = zeros(1, (second_index - emp_index_adap) - (first_index + emp_index_adap) + 1); % allocate space vector (necessary for mean value calculation) 
    for i = (first_index + emp_index_adap):(second_index - emp_index_adap)
        osc_ch2_top(i - (first_index + emp_index_adap) + 1) = osc_ch2(i); % save part of the data set
    end
    
    mean_top_I_C = mean(osc_ch2_top); % calculate mean value of I_C (when switched on -> top)
    count = 0;
    for i = 1:length(changes_ch2)
        if(changes_ch2(i))
            count = count + 1;
        end
        
        if(count == 2)
            ch2_y1 = mean_top_I_C;
            ch2_y2 = mean_ch2(i);
            break
        end
    end

    I_C(j) = abs(ch2_y1 - ch2_y2); % caluculate charge current
    cursor_ch2_y1 = zeros(1, length(osc_time));
    cursor_ch2_y2 = zeros(1, length(osc_time));
    for i = 1:length(osc_time)
        cursor_ch2_y1(i) = ch2_y2;
        cursor_ch2_y2(i) = ch2_y1;
    end

    R_eC(j) = abs(delta_U_C(j)) / I_C(j); % calculate the electrolyte resistance when the battery is charging
    
    if(en_figures)
        figure(figure_counter); % plot the Ch1 and Ch2 datastes as well as the calculated cursors obtained from the charge experiment
        xlabel('Time $t$ in $\left(\mathrm{s}\right)$', 'Interpreter', 'latex', 'FontSize', fnt_sz);
        hold on;
        grid on;
        
        yyaxis right;
        plot_1 = plot(osc_time, osc_ch1, 'DisplayName', '$U_\mathrm{B}(t)$', 'Linewidth', 1.4, 'Color', '#0066FF');
        cursor_plot_ch1_y1 = plot(osc_time, cursor_ch1_y1, '--', 'Linewidth', .7, 'Color', '#0000FF', 'DisplayName', 'Ch1 cursor Y1');
        cursor_plot_ch1_y2 = plot(osc_time, cursor_ch1_y2, '-.', 'Linewidth', .7, 'Color', '#0000FF', 'DisplayName', 'Ch1 cursor Y2');
        ylabel('Oscilloscope Ch1 in $\left(\mathrm{V}\right)$', 'Interpreter', 'latex', 'FontSize', fnt_sz);
        set(gca,'yticklabel',num2str(get(gca,'ytick')','%.2f'))
        
        yyaxis left;
        plot_2 = plot(osc_time, osc_ch2, 'DisplayName', '$I_\mathrm{C}(t)$', 'Linewidth', 1.4, 'Color', '#009933');
        cursor_plot_ch2_y1 = plot(osc_time, cursor_ch2_y1, '--', 'Linewidth', .7, 'Color', '#006600', 'DisplayName', 'Ch2 cursor Y1');
        cursor_plot_ch2_y2 = plot(osc_time, cursor_ch2_y2, '-.', 'Linewidth', .7, 'Color', '#006600', 'DisplayName', 'Ch2 cursor Y2');
        ylabel('Oscilloscope Ch2 in $\left(\mathrm{A}\right)$', 'Interpreter', 'latex', 'FontSize', fnt_sz);
        
        legend([plot_1, plot_2, cursor_plot_ch1_y1, cursor_plot_ch1_y2, cursor_plot_ch2_y1, cursor_plot_ch2_y2], 'Location', 'NorthEast', 'Interpreter', 'latex', 'FontSize', fnt_sz);
        ax = gca;
        ax.YAxis(1).Color = '#009933';
        ax.YAxis(2).Color = '#0066FF';
        set(ax,'TickLabelInterpreter', 'latex', 'FontSize', fnt_sz);
        
        plot_pos_x0 = 10;
        plot_pos_y0 = 10;
        plot_width = 800;
        plot_height = 400;
        set(gcf,'position',[plot_pos_x0, plot_pos_y0, plot_width, plot_height]);
        
        export_title = ['latex_export/image_chg_', num2str(SOC(j) * 100),'.eps'];
        exportgraphics(gcf, export_title);
        
        figure_counter = figure_counter + 1;
    end
    
end

%% Plotting the electrlyte resistances

if(en_figures)
    figure(figure_counter); % plot open-circuit voltages
    hold on;
    grid on;
    xlabel('$\mathrm{SOC}$ in $\left(\mathrm{1}\right)$', 'Interpreter', 'latex', 'FontSize', fnt_sz);
    ylabel('Electrolyte resistances in $\left(\Omega\right)$', 'Interpreter', 'latex', 'FontSize', fnt_sz);
    plot_1 = plot(SOC, R_eC, '-*', 'DisplayName', '$R_\mathrm{e,C}(\mathrm{SOC}_n)$', 'Linewidth', 1.4, 'Color', '#81b8ac');
    plot_2 = plot(SOC, R_eD, '-o', 'DisplayName', '$R_\mathrm{e,D}(\mathrm{SOC}_n)$', 'Linewidth', 1.4, 'Color', '#eb7a34');
    legend([plot_2, plot_1], 'Location', 'SouthWest', 'Interpreter', 'latex', 'FontSize', fnt_sz);
    ax = gca;
    set(ax,'TickLabelInterpreter', 'latex', 'FontSize', fnt_sz);
    ax.YAxis.TickLabelFormat = '%.4f';
    
    plot_pos_x0 = 10;
    plot_pos_y0 = 10;
    plot_width = 600;
    plot_height = 400;
    set(gcf,'position',[plot_pos_x0, plot_pos_y0, plot_width, plot_height]);
    
    export_title = 'latex_export/image_electrolyte_resistances_matlab.eps';
    exportgraphics(gcf, export_title);
    
    figure_counter = figure_counter + 1;
end

%% Calculating time contant tau_B of the battery:

% ----------------------------------------------------------------- %
% Reading first .cvs data set generated by the oscilloscope:        %
% ----------------------------------------------------------------- %

imported_data = 'cv_charge_behavior/i_exp_dec.csv';

dis_data = table2array(readtable(imported_data));                         
dis_data(1,:) = [];                                                       
dis_data(1,:) = [];                                                       

osc_time = (dis_data(:,1) + 250)/60; % new time shift with time in (min)                                                                                   
osc_ch2 = dis_data(:,2) / R_shunt * (-1); % multipied with -1 due to Kirchhoff's second law  

% ----------------------------------------------------------------- %
% Generating plynomial fitting function and obtaining slope at a    %
% given point osc_time_index:                                       %
% ----------------------------------------------------------------- %

poly_order = 20; % order of fitting function
res = 1000; % resolution of the fitting fnct.

[p, ~, mu] = polyfit(osc_time, osc_ch2, poly_order); % fitting fnct. centered and scaled
osc_time_fit = linspace(min(osc_time), max(osc_time), res); % prep. to plotting fitting fnct.
osc_ch2_fit = polyval(p, osc_time_fit, [], mu); % prep to. plotting fitting fnct.

osc_time_index = 280;  % index at the point of the tangent
osc_time_0 = osc_time(osc_time_index); % point through which the tangent runs  
poly_time = @(osc_time) polyval(p, osc_time, [], mu); % calculus with fitting fnct.
d_poly_time = derivest(poly_time, osc_time_0); % derivative of the fitting fnct.

osc_time_t0 = osc_time_0 + (osc_ch2(1) - poly_time(osc_time_0))/d_poly_time; % point in time when the tangent crosses the osc_time axis for osc_ch2(1) 
osc_time_tangent = [osc_time_0 - 0.3 osc_time_t0]; % prep. to plotting tangent
osc_ch2_tangent = poly_time(osc_time_0) + (osc_time_tangent - osc_time_0) * d_poly_time; % prep. to plotting tangent

tau_B = osc_time_t0 - osc_time_0; % battery time constant

if(en_figures)
    zero_vect = zeros(1, length(osc_time));
    
    for i = 1:length(osc_time)
        zero_vect(i) = osc_ch2(1);
    end
    
    figure(figure_counter); % plot I_C under constant voltage charging
    hold on;
    grid on;
    xlabel('Time $t$ in $\left(\mathrm{min}\right)$', 'Interpreter', 'latex', 'FontSize', fnt_sz);
    ylabel('Charging current $I_\mathrm{C}(t)$ in $\left(\mathrm{A}\right)$', 'Interpreter', 'latex', 'FontSize', fnt_sz);
    
    plot_1 = plot(osc_time, osc_ch2, 'DisplayName', '$I_\mathrm{C}(t)$ measured', 'Linewidth', 1.4, 'Color', '#c94747');
    plot_2 = plot(osc_time_fit, osc_ch2_fit, 'DisplayName', '$I_\mathrm{C}(t)$ fitted', 'Linewidth', 0.7, 'Color', '#475cc9');
    plot_3 = plot(osc_time_tangent, osc_ch2_tangent, 'DisplayName', 'tangent at $\approx 1\mathrm{min}$', 'Linewidth', 0.7, 'Color', '#74c26d');
    plot_4 = plot(osc_time, zero_vect, '--', 'DisplayName', 'line to indicate zero crossing', 'Linewidth', 0.7, 'Color', '#000000');
    legend([plot_1, plot_2, plot_3, plot_4], 'Location', 'NorthEast', 'Interpreter', 'latex', 'FontSize', fnt_sz);
    xlim([0 8]);
    ylim([-0.5 11]);
    ax = gca;
    set(ax,'TickLabelInterpreter', 'latex', 'FontSize', fnt_sz);
    %ax.YAxis.TickLabelFormat = '%.1f';
    %ax.XAxis.TickLabelFormat = '%.1f';
    
    plot_pos_x0 = 10;
    plot_pos_y0 = 10;
    plot_width = 600;
    plot_height = 400;
    set(gcf,'position',[plot_pos_x0, plot_pos_y0, plot_width, plot_height]);
    
    export_title = 'latex_export/image_tau_b_matlab.eps';
    exportgraphics(gcf, export_title);
    
    figure_counter = figure_counter + 1;
end

%% Creating table for latex:

latex_vect = [SOC; R_eD; R_eC; U_0_D; U_0_C; U_0]'; % creating vector with all impoortant parameters
sympref('FloatingPointOutput',1); % allow floating point output instead of fractions
latex_table = latex(sym(latex_vect)); % create string (latex table)
disp(' ')
disp('Latex table (copy and paste): ')
disp(latex_table) % display to console for copy and paste 
disp(' ')
